(library
 (libraries
  base
  menhirLib
  ppx_show.runtime
  zarith
  visitors.runtime
  ppx_sexp_conv
  sexplib)
 (preprocess
  (pps
   ppx_show
   ppx_make
   ppx_compare
   visitors.ppx
   ppx_sexp_conv
   ppx_yojson_conv))
 (modules
  tokens
  parser
  lexer
  located
  syntax
  unitActionsParser
  parserMessages
  asm
  asm_lexer
  asm_parser
  zint
  errors
  lang_types
  builtin
  interpreter
  lang
  codegen_func
  ;codegen
  )
 (name tact))

(ocamllex asm_lexer)

(menhir
 (modules asm_parser)
 (flags -v))

(ocamllex lexer)

(menhir
 (modules tokens)
 (flags -v --only-tokens))

(menhir
 (modules tokens parser)
 (merge_into parser)
 (flags -v --external-tokens Tokens --unused-token TYPE))

;; The following two rules create a copy of the file parser.mly named
;; unitActionsParser.mly. This is a copy of the grammar where the semantic
;; actions have been removed and replaced with unit values. It is compiled
;; by Menhir's table back-end to obtain the module UnitActionsParser.

;; The use of [--external-tokens Parser] is required for the two parsers
;; to share a single [token] type. This makes them usable with the same
;; lexer.

(rule
 (action
  (with-stdout-to
   unitActionsParser.mly
   (run
    menhir
    %{dep:tokens.mly}
    %{dep:parser.mly}
    --base
    parser
    --unused-token
    TYPE
    --only-preprocess-u))))

(menhir
 (modules unitActionsParser)
 (flags --table --external-tokens Tokens --unused-token TYPE))

;; -----------------------------------------------------------------------------

;; This section deals with the .messages file.

;; The following rule generates "parserMessages.ml" based on the source file
;; "parserMessages.messages". It requires the completeness check to have been
;; performed first. (If desired, this check could be disabled.)

(rule
 (deps parserMessages.check)
 (action
  (with-stdout-to
   parserMessages.ml
   (run
    menhir
    %{dep:tokens.mly}
    %{dep:parser.mly}
    --base
    parser
    --unused-token
    TYPE
    --compile-errors
    %{dep:parserMessages.messages}))))

;; This rule generates a file "parserMessages.auto.messages" that contains a
;; list of all error states. It is used by the completeness check.

(rule
 (with-stdout-to
  parserMessages.auto.messages
  (run
   menhir
   %{dep:tokens.mly}
   %{dep:parser.mly}
   --base
   parser
   --unused-token
   TYPE
   --list-errors)))

;; This rule implements the completeness check. It checks that every error
;; state listed in the auto-generated file "parserMessages.auto.messages"
;; is also listed in the file "parserMessages.messages" that is maintained
;; by the programmer.

(rule
 (with-stdout-to
  parserMessages.check
  (run
   menhir
   %{dep:tokens.mly}
   %{dep:parser.mly}
   --base
   parser
   --unused-token
   TYPE
   --compare-errors
   %{dep:parserMessages.auto.messages}
   --compare-errors
   %{dep:parserMessages.messages})))

;; -----------------------------------------------------------------------------
